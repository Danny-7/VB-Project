<?xml version="1.0"?>
<doc>
<assembly>
<name>
ProjetV1
</name>
</assembly>
<members>
<member name="T:ProjetV1.My.Resources.Resources">
<summary>
  Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
</summary>
</member>
<member name="P:ProjetV1.My.Resources.Resources.ResourceManager">
<summary>
  Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
</summary>
</member>
<member name="P:ProjetV1.My.Resources.Resources.Culture">
<summary>
  Remplace la propriété CurrentUICulture du thread actuel pour toutes
  les recherches de ressources à l'aide de cette classe de ressource fortement typée.
</summary>
</member>
<member name="T:ProjetV1.Candidat">
 <summary>
 Classe représentant un candidat
 </summary>
</member>
<member name="M:ProjetV1.Candidat.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Constructeur de la classe Candidat
 L'identifiant est créé par un compteur statique
 </summary>
 <param name="nom">Nom du candidat</param>
 <param name="prenom">Prénom du candidat</param>
 <param name="adresse">Adresse du candidat</param>
 <param name="cp">Code postal du candidat</param>
 <param name="ville">Ville du candidat</param>
 <param name="age">Age du candidat</param>
</member>
<member name="M:ProjetV1.Candidat.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Constructeur de la classe Candidat
 L'identifiant est passé en paramètre
 </summary>
</member>
<member name="M:ProjetV1.Candidat.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
 <summary>
 Constructeur de la classe Candidat
 L'identifiant et la région sont passés en paramètre
 </summary>
</member>
<member name="M:ProjetV1.Candidat.GetId">
 <summary>
 Retourne l'identifiant du candidat
 </summary>
 <returns>L'identifiant du candidat</returns>
</member>
<member name="M:ProjetV1.Candidat.GetNom">
 <summary>
 Retourne le nom du candidat
 </summary>
 <returns>Le nom du candidat</returns>
</member>
<member name="M:ProjetV1.Candidat.GetPrenom">
 <summary>
 Retourne le prénom du candidat
 </summary>
 <returns>Le prénom du candidat</returns>
</member>
<member name="M:ProjetV1.Candidat.GetAdresse">
 <summary>
 Retourne l'adresse du candidat
 </summary>
 <returns>L'adresse du candidat</returns>
</member>
<member name="M:ProjetV1.Candidat.GetCP">
 <summary>
 Retourne le code postal du candidat
 </summary>
 <returns>Le code postal du candidat</returns>
</member>
<member name="M:ProjetV1.Candidat.GetVille">
 <summary>
 Retourne la ville du candidat
 </summary>
 <returns>La ville du candidat</returns>
</member>
<member name="M:ProjetV1.Candidat.GetAge">
 <summary>
 Retourne l'age du candidat
 </summary>
 <returns>L'age du candidat</returns>
</member>
<member name="M:ProjetV1.Candidat.GetRegion">
 <summary>
 Retourne la région du candidat
 </summary>
 <returns>La région du candidat</returns>
</member>
<member name="M:ProjetV1.Candidat.GetEpreuve(System.Int32)">
 <summary>
 Retourne une epreuve présente dans la liste des épreuves
 </summary>
 <param name="i">L'indice au quel l'épreuve se trouve dans la liste</param>
 <returns>L'épreuve à l'indice i</returns>
</member>
<member name="M:ProjetV1.Candidat.GetSizeOfEpreuve">
 <summary>
 Retourne le nombre d'épreuves du candidat
 </summary>
 <returns>Le nombre d'épreuves</returns>
</member>
<member name="M:ProjetV1.Candidat.SetRegion(System.String)">
 <summary>
 Permet de modifier la région du candidat
 </summary>
 <param name="region">La région du candidat</param>
</member>
<member name="M:ProjetV1.Candidat.AjouterEpreuve(System.String,ProjetV1.Epreuve.TypeEpv@)">
 <summary>
 Ajoute une epreuve choisie par le candidat
 </summary>
 <param name="nom"> Nom de l'épreuve à ajouter</param>
 <param name="type"> Type de l'épreuve à ajouter</param>
</member>
<member name="M:ProjetV1.Candidat.ClearEpreuve">
 <summary>
 Supprime toutes les épreuves du candidat
 </summary>
</member>
<member name="T:ProjetV1.Epreuve">
 <summary>
 Classe représentant une épreuve
 </summary>
</member>
<member name="T:ProjetV1.Epreuve.TypeEpv">
 <summary>
 Enumération du type d'épreuve possible
 </summary>
</member>
<member name="M:ProjetV1.Epreuve.#ctor(System.Object,System.Object)">
 <summary>
 Constructeur pour créer une épreuve
 </summary>
 <param name="nom"> Nom de l'épreuve</param>
 <param name="type"> Type de l'épreuve</param>
</member>
<member name="M:ProjetV1.Epreuve.GetTypeOfEpv">
 <summary>
 Retourne le type de l'épreuve
 </summary>
 <returns>Le type de l'épreuve</returns>
</member>
<member name="M:ProjetV1.Epreuve.GetNom">
 <summary>
 Retourne le nom de l'épreuve
 </summary>
 <returns>Le nom</returns>
</member>
<member name="T:ProjetV1.FormAccueil">
 <summary>
 Formulaire de l'accueil de l'application d'inscription à un concours 
 </summary>
</member>
<member name="M:ProjetV1.FormAccueil.BtnEnrg_Click(System.Object,System.EventArgs)">
 <summary>
 Ouvrir le formulaire d'inscription 
 </summary>
</member>
<member name="M:ProjetV1.FormAccueil.BtnModifSuppr_Click(System.Object,System.EventArgs)">
 <summary>
 Ouvrir le formulaire de modification et de suppression d'une inscription
 </summary>
</member>
<member name="M:ProjetV1.FormAccueil.BtnEtatInsc_Click(System.Object,System.EventArgs)">
 <summary>
 Ouvrir le formulaire Etat inscriptions pour visualiser l'état des inscriptions
 </summary>
</member>
<member name="M:ProjetV1.FormAccueil.BtnBilan_Click(System.Object,System.EventArgs)">
 <summary>
 Ouvrir le formulaire du bilan provisoire
 </summary>
</member>
<member name="M:ProjetV1.FormAccueil.BtnClore_Click(System.Object,System.EventArgs)">
 <summary>
 Ouvrir le formulaire bilan pour visualiser le bilan des inscriptions
 Clore les inscriptions en créant un listing de tous les candidats inscrits
 </summary>
</member>
<member name="M:ProjetV1.FormAccueil.BtnFermer_Click(System.Object,System.EventArgs)">
 <summary>
 Sauvegarder les inscriptions
 Fermer l'application sans clore les inscriptions
 </summary>
</member>
<member name="T:ProjetV1.FormBilan">
 <summary>
 Formulaire du bilan (provisoire ou final) des inscriptions
 </summary>
</member>
<member name="M:ProjetV1.FormBilan.FormBilan_Load(System.Object,System.EventArgs)">
 <summary>
 Au chargement du formulaire on ajoute à la comboBox des candidats tous les candidats enregistrés
 De même pour la comboBox des matières à partir des deux dictionnaires permettant d'avoir les initials de chaque matière
 
 </summary>
</member>
<member name="M:ProjetV1.FormBilan.FormBilan_VisibleChanged(System.Object,System.EventArgs)">
 <summary>
 Si le bilan est visible, mise à jour du nombre d'inscrit dans un label du formulaire,
 Mise à jour des candidats inscrits
 </summary>
</member>
<member name="M:ProjetV1.FormBilan.BtnCandidat_Click(System.Object,System.EventArgs)">
 <summary>
 Au clic du bouton "Afficher le bilan de la candidature",
 On récupère le candidat sélectionné
 On affiche la formulaire récapitulatif en mode provisoire ou final selon si le bouton retour est actif ou non
 </summary>
</member>
<member name="M:ProjetV1.FormBilan.BtnMatiere_Click(System.Object,System.EventArgs)">
 <summary>
 Lors de l'appui sur le bouton "Afficher bilan matière"
 Vérification qu'une matière a été séléctionnée
 On modifie le label de la matière du formulaire "bilan matière"
 Puis on affiche le formulaire "bilan matière"
 </summary>
</member>
<member name="M:ProjetV1.FormBilan.BtnRetour_Click(System.Object,System.EventArgs)">
 <summary>
 Au clic du bouton retour, affichage de l'accueil
 Ce bouton est activé si le bilan est provisoire et désactivé si le bilan est final
 </summary>
</member>
<member name="M:ProjetV1.FormBilan.BtnFermer_Click(System.Object,System.EventArgs)">
 <summary>
 Ce bouton est activé si nous avons choisi de clore les inscriptions depuis l'accueil
 A la clôture des inscriptions on quitte l'application
 </summary>
</member>
<member name="T:ProjetV1.FormBilanMatière">
 <summary>
 Formulaire du bilan des inscriptions pour une matière choisie dans le FormBilan
 </summary>
</member>
<member name="M:ProjetV1.FormBilanMatière.FormBilanMatière_VisibleChanged(System.Object,System.EventArgs)">
 <summary>
 A l'apparition du formulaire,
 On affiche dans une listBox triée par ordre alphabétique tous les candidats inscrits à cette épreuve
 </summary>
</member>
<member name="M:ProjetV1.FormBilanMatière.BtnRetour_Click(System.Object,System.EventArgs)">
 <summary>
 Affiche l'accueil et ferme le bilan de la matière
 </summary>
</member>
<member name="T:ProjetV1.FormCandid">
 <summary>
 Formulaire de saisie des informations personnelles du candidat
 </summary>
</member>
<member name="M:ProjetV1.FormCandid.FormCandid_Load(System.Object,System.EventArgs)">
 <summary>
 Au chargement du formulaire la taille maximale des champs est modifiée
 </summary>
</member>
<member name="F:ProjetV1.FormCandid.cpt">
 Le compteur associé au Timer1 pour le décompte
</member>
<member name="M:ProjetV1.FormCandid.FormCandid_VisibleChanged(System.Object,System.EventArgs)">
 <summary>
 Au changement de visibilité, si le formulaire est visible le Timer1 s'enclenche
 </summary>
</member>
<member name="M:ProjetV1.FormCandid.Timer1_Tick(System.Object,System.EventArgs)">
 <summary>
 Au tic, si le décompte de cpt est fini, l'application revient à l'accueil
 Sinon, le décompte de cpt continue
 </summary>
</member>
<member name="M:ProjetV1.FormCandid.TbAlpha_keypress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 Vérifie que les données entrées sont bien des caractères alphabétiques
 </summary>
</member>
<member name="M:ProjetV1.FormCandid.TbCp_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 Vérifie que le code postal est bien numérique 
 </summary>
</member>
<member name="M:ProjetV1.FormCandid.HScrollAge_Scroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
 <summary>
 Affiche l'age choisi sur le scroll bar
 </summary>
</member>
<member name="M:ProjetV1.FormCandid.BtnAban_Click(System.Object,System.EventArgs)">
 <summary>
 Lors de l'appui sur le bouton abandonner, le formulaire nous redirige vers l'accueil 
 </summary>
</member>
<member name="M:ProjetV1.FormCandid.BtnVali_Click(System.Object,System.EventArgs)">
 <summary>
 Lors de l'appui sur le bouton valider le timer s'arrête, le formulaire devient invisible
 Le formulaire pour selectionner les épreuves devient visible 
 Si les informtaions obligatoires ne sont pas entrées un message apparait 
 </summary>
</member>
<member name="M:ProjetV1.FormCandid.ClearForm">
 <summary>
 Réinitialise le formulaire
 </summary>
</member>
<member name="M:ProjetV1.FormCandid.CheckForm">
 <summary>
 Vérifie que le formulaire est rempli correctement
 Indique les champs incorrects en rouge
 </summary>
 <returns>Un boolean qui indique la validité du formulaire</returns>
</member>
<member name="M:ProjetV1.FormCandid.CréerCandidat">
 <summary>
 Permet de créer un candidat à partir des informations personnelles saisies
 </summary>
 <returns>Un nouveau candidat</returns>
</member>
<member name="M:ProjetV1.FormCandid.CréerCandidat(System.Int32)">
 <summary>
 Permet de créer un candidat à partir des informations d'un identifiant et des informations personnelles saisies
 </summary>
 <param name="id">L'identifiant du candidat</param>
 <returns>Un nouveau candidat</returns>
</member>
<member name="M:ProjetV1.FormCandid.LoadCandidat(ProjetV1.Candidat@)">
 <summary>
 Remplit le formulaire avec les informations d'un candidat
 </summary>
 <param name="c">Le candidat avec lequel on remplit le formulaire</param>
</member>
<member name="T:ProjetV1.FormEpv">
 <summary>
 Formulaire de choix des épreuves d'un candidat
 </summary>
</member>
<member name="M:ProjetV1.FormEpv.FormEpv_Load(System.Object,System.EventArgs)">
 <summary>
 Au chargement du formulaire des épreuves 
 A partir de deux dictionnaires, l'un pour les épreuves orales et l'autre pour les épreuves écrites,
 Chaque checkbox contenu dans un panel distinct en fonction du type d'épreuve, va être assignée avec le nom d'une épreuve
 Une comboBox contenant toutes les régions possibles va être remplie
 </summary>
</member>
<member name="M:ProjetV1.FormEpv.FormEpv_VisibleChanged(System.Object,System.EventArgs)">
 <summary>
 Au changement de visibilité, si le candidat s'inscrit pour la première fois
 la première région est sélectionnée dans la comboBox
 Si le formulaire est visible, il est chargé avec le nom et le prénom du candidat et le Timer2 est lancé
 </summary>
</member>
<member name="M:ProjetV1.FormEpv.Timer2_Tick(System.Object,System.EventArgs)">
 <summary>
 Au tic, si le décompte de cpt est fini, l'application revient à l'accueil
 Sinon, le décompte de cpt continue
 </summary>
</member>
<member name="M:ProjetV1.FormEpv.CbEcrit_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 Si checkbox est sélectionnée on vérifie que le compteur ne soit pas égal 0 car dans ce cas on ne peut plus ajouter une épreuve
 Lors de la selection si la première condition est valide 
 Alors on désactive la checkBox contenant le même nom de l'épreuve séléctionnée dans le panel des épreuves orales
 Si une checkBox est désélectionnée, on réactive la checkBox dans le panel oral
 </summary>
</member>
<member name="M:ProjetV1.FormEpv.CbOral_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 Si checkbox est sélectionnée on vérifie que le compteur ne soit pas égal 0 car dans ce cas on ne peut plus ajouter une épreuve
 Lors de la selection si la première condition est valide 
 Alors on désactive la checkBox contenant le même nom de l'épreuve séléctionnée dans le panel des épreuves écrites
 Si une checkBox est désélectionnée, on réactive la checkBox dans le panel écrit
 </summary>
</member>
<member name="M:ProjetV1.FormEpv.TbCpt_TextChanged(System.Object,System.EventArgs)">
 <summary>
 Si les compteurs d'épreuves restantes sont nulles
 Le panel du choix de l'épreuve facultative devient actif
 </summary>
</member>
<member name="M:ProjetV1.FormEpv.RbOui_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 Si RbOui est sélectionné, les panels des épreuves sont désactivées
 Une comboBox avec les épreuves restantes est chargée et devient visible
 </summary>
</member>
<member name="M:ProjetV1.FormEpv.RbNon_CheckedChanged(System.Object,System.EventArgs)">
 <summary>
 Si RbNon est sélectionné, les panels des épreuves sont activés
 La comboBox avec les épreuves restantes devient invisible
 </summary>
</member>
<member name="M:ProjetV1.FormEpv.BtnAbandon_Click(System.Object,System.EventArgs)">
 <summary>
 Dans le cas où le candidat décide d'abandonner son inscription (choix des épreuves)
 On le redirige vers l'accueil
 le formulaire courant devient invisible
 </summary>
</member>
<member name="M:ProjetV1.FormEpv.BtnValider_Click(System.Object,System.EventArgs)">
 <summary>
 Si le formulaire est valide alors le Timer2 s'arrête
 Puis un Candidat est créé et le formulaire récapitulatif devient visible en mode inscription
 Sinon une msgBox indique que le formulaire est non valide
 </summary>
</member>
<member name="M:ProjetV1.FormEpv.ClearForm">
 <summary>
 Réinitialise le formulaire lors d'une nouvelle inscription 
 </summary>
</member>
<member name="M:ProjetV1.FormEpv.CheckForm">
 <summary>
 Vérifie que le formulaire est rempli correctement
 Indique les champs incorrects en rouge
 </summary>
 <returns>Un boolean qui indique la validité du formulaire</returns>
</member>
<member name="M:ProjetV1.FormEpv.AjouterEpreuves(ProjetV1.Candidat@)">
 <summary>
 Ajoute les épreuves séléctionnées à la liste des épreuves du candidat
 </summary>
 <param name="cand">L'objet candidat</param>
</member>
<member name="M:ProjetV1.FormEpv.LoadEpreuves(ProjetV1.Candidat)">
 <summary>
 Remplit le formulaire avec les informations sur les épreuves d'un candidat
 </summary>
 <param name="c">Le candidat avec lequel on remplit le formulaire</param>
</member>
<member name="T:ProjetV1.FormEtatInsc">
 <summary>
 Formulaire permettant de visualiser l'état de l'inscription des candidats
 </summary>
</member>
<member name="M:ProjetV1.FormEtatInsc.FormEtatInsc_Load(System.Object,System.EventArgs)">
 <summary>
 Au chargement du formulaire la liste des épreuves écrites et orales est triée
 </summary>
</member>
<member name="M:ProjetV1.FormEtatInsc.FormEtatInsc_VisibleChanged(System.Object,System.EventArgs)">
 <summary>
 Au changement de visibilité dans le cas où le fomrulaire est visible
 On remplit la liste des candidats par ordre alphabétique en focntion du nom et prénom
 </summary>
</member>
<member name="M:ProjetV1.FormEtatInsc.LbCandidat_SelectedIndexChanged(System.Object,System.EventArgs)">
 <summary>
 Au changement de sélection du candidat, 
 Mise à jour des listBox des épreuves pour contenir les épreuves du candidat sélectionné
 </summary>
</member>
<member name="M:ProjetV1.FormEtatInsc.BtnRetour_Click(System.Object,System.EventArgs)">
 <summary>
 Au clic du bouton retour, affiche l'accueil
 </summary>
</member>
<member name="T:ProjetV1.FormModifSuppr">
 <summary>
 Formulaire de modification et de suppression d'un candidat
 </summary>
</member>
<member name="M:ProjetV1.FormModifSuppr.FormModifSuppr_VisibleChanged(System.Object,System.EventArgs)">
 <summary>
 On met à jour le formulaire en le vidant de toute donnée
 Au chargement du formulaire on ajoute tous les candidats enregistrés à la comboBox
 </summary>
</member>
<member name="M:ProjetV1.FormModifSuppr.TbId_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
 <summary>
 Vérifie que l'identifiant entré est bien numérique 
 </summary>
</member>
<member name="M:ProjetV1.FormModifSuppr.TbId_LostFocus(System.Object,System.EventArgs)">
 <summary>
 A l'arrêt de la saisie, on récupère l'identifiant entré si le champ n'est pas vide
 </summary>
</member>
<member name="M:ProjetV1.FormModifSuppr.CbNomPrenom_SelectedValueChanged(System.Object,System.EventArgs)">
 <summary>
 A la sélection d'un candidat, on récupère l'identifiant correspondant
 </summary>
</member>
<member name="M:ProjetV1.FormModifSuppr.BtnModif_Click(System.Object,System.EventArgs)">
 <summary>
 Au clic du bouton modifier, on affiche le formulaire de la saisie des informations personnelles du candidat
 Et les formulaires d'inscription sont remplis avec les informations du candidat si le formulaire est valide
 Sinon les labels deviennent rouge
 </summary>
</member>
<member name="M:ProjetV1.FormModifSuppr.BtnSupprimer_Click(System.Object,System.EventArgs)">
 <summary>
 Au clic du bouton supprimer, on affiche le formulaire récapitulatif en mode suppression
 Et il est rempli avec les informations du candidat si le formulaire est valide
 Sinon les labels deviennent rouge
 </summary>
</member>
<member name="M:ProjetV1.FormModifSuppr.BtnAbandon_Click(System.Object,System.EventArgs)">
 <summary>
 Au clic du bouton abandonner, on affiche l'accueil
 </summary>
</member>
<member name="M:ProjetV1.FormModifSuppr.ClearForm">
 <summary>
 Réinitialise le formulaire
 </summary>
</member>
<member name="M:ProjetV1.FormModifSuppr.CheckForm">
 <summary>
 Vérifie que le formulaire est rempli correctement
 Indique les champs incorrects en rouge
 </summary>
 <returns>Un boolean qui indique la validité du formulaire</returns>
</member>
<member name="T:ProjetV1.FormRecap">
 <summary>
 Formulaire récapitulatif des informations d'un candidat
 </summary>
</member>
<member name="M:ProjetV1.FormRecap.FormRecap_VisibleChanged(System.Object,System.EventArgs)">
 <summary>
 Au changement de visibilité on remplit le formulaire avec les informations du candidat
 </summary>
</member>
<member name="M:ProjetV1.FormRecap.BtnAbandon_Click(System.Object,System.EventArgs)">
 <summary>
 Lors de l'appui sur le bouton abandonner, on abandonne l'enregistrement du candidat et on revient à l'accueil
 Ce bouton est visible en mode inscription
 </summary>
</member>
<member name="M:ProjetV1.FormRecap.BtnRetour_Click(System.Object,System.EventArgs)">
 <summary>
 Lors de l'appui sur le bouton retour, on revient au formulaire de la saisie des informations personnelles du candidat
 Ce bouton est visible en mode inscription
 </summary>
</member>
<member name="M:ProjetV1.FormRecap.BtnEnrg_Click(System.Object,System.EventArgs)">
 <summary>
 Dans un premier temps on vérifie qu'on était pas en train de faire une modification de l'inscription du candidat
 Si nous sommes dans ce cas alors on supprime le candidat qu'on avait enregistré
 Puis on ajoute le candidat à la liste des inscrits
 Un message apparait pour lui donner son numéro de candidat 
 Ce bouton est visible en mode inscription
 </summary>
</member>
<member name="M:ProjetV1.FormRecap.BtnSuppr_Click(System.Object,System.EventArgs)">
 <summary>
 Affiche une msmBox demandant la confirmation de suppression
 Supprime le candidat de la liste des inscrits du MainModule si oui
 Affiche l'accueil et ferme le récapitulatif
 Ce bouton est visible en mode suppression
 </summary>
</member>
<member name="M:ProjetV1.FormRecap.BtnRetourBilan_Click(System.Object,System.EventArgs)">
 <summary>
 Affiche l'accueil et ferme le récapitulatif
 Ce bouton est visible en mode bilan
 </summary>
</member>
<member name="M:ProjetV1.FormRecap.ModeInscription">
 <summary>
 Fait apparaître les boutons utilisés lors d'un récapitulatif d'inscription
 </summary>
</member>
<member name="M:ProjetV1.FormRecap.ModeSuppr">
 <summary>
 Fait apparaître les boutons utilisés lors d'un récapitulatif pour une suppression
 </summary>
</member>
<member name="M:ProjetV1.FormRecap.ModeBilan">
 <summary>
 Fait apparaître les boutons utilisés lors d'un récapitulatif bilan
 </summary>
</member>
<member name="M:ProjetV1.FormRecap.SetCandidat(ProjetV1.Candidat@)">
 <summary>
 Modifie le candidat du formulaire
 </summary>
 <param name="c">Le candidat en question</param>
</member>
<member name="M:ProjetV1.FormRecap.RemplirPanelCandidat(ProjetV1.Candidat@)">
 <summary>
 Rempli les champs d'un candidat avec les informations personelles de celui-ci 
 </summary>
 <param name="c">Le candidat en question</param>
</member>
<member name="M:ProjetV1.FormRecap.RemplirPanelEpreuves(ProjetV1.Candidat@)">
 <summary>
 Rempli les champs des épreuves avec les épreuves d'un candidat
 </summary>
 <param name="c">Le candidat en question</param>
</member>
<member name="T:ProjetV1.MainModule">
 <summary>
 Module principal et point d'entrée de l'application d'inscription
 Il contient tous les formulaires assurant le fonctionnement de l'application
 </summary>
</member>
<member name="P:ProjetV1.MainModule.Région">
 <summary>
 Propriété du tableau région
 </summary>
 <returns>Le tableau région</returns>
</member>
<member name="P:ProjetV1.MainModule.OralDictionnaire">
 <summary>
 Propriété du dictionnaire des épreuves orales
 </summary>
 <returns>Le dictionnaire des épreuves orales</returns>
</member>
<member name="P:ProjetV1.MainModule.ÉcritDictionnaire">
 <summary>
 Propriété du dictionnaire des épreuves écrites
 </summary>
 <returns>Le dictionnaire des épreuves écrites</returns>
</member>
<member name="M:ProjetV1.MainModule.MakeDictionary">
 <summary>
 Crée les dictionnaires des épreuves écrites et orales
 </summary>
</member>
<member name="M:ProjetV1.MainModule.ShowAccueil">
 <summary>
 Affiche le formulaire de l'accueil
 </summary>
</member>
<member name="M:ProjetV1.MainModule.ShowFormCandidat">
 <summary>
 Affiche le formulaire pour saisir les informations personnelles d'un candidat
 </summary>
</member>
<member name="M:ProjetV1.MainModule.ShowEpreuve">
 <summary>
 Affiche le formulaire pour choisir les épreuves d'un candidat
 </summary>
</member>
<member name="M:ProjetV1.MainModule.ShowRecap">
 <summary>
 Affiche le formulaire récapitulatif d'une inscription
 </summary>
</member>
<member name="M:ProjetV1.MainModule.ShowModifSuppr">
 <summary>
 Affiche le formulaire de modification et de suppression d'un candidat
 </summary>
</member>
<member name="M:ProjetV1.MainModule.ShowEtatInsc">
 <summary>
 Affiche le formulaire de montrant l'état des insccriptions
 </summary>
</member>
<member name="M:ProjetV1.MainModule.ShowBilan">
 <summary>
 Affiche le formulaire de bilan (provisoire ou final)
 </summary>
</member>
<member name="M:ProjetV1.MainModule.ClearForms">
 <summary>
 Réinitialise les formulaires 
 </summary>
</member>
<member name="M:ProjetV1.MainModule.ModeInscription">
 <summary>
 Met le formulaire récapitulatif en mode inscription
 </summary>
</member>
<member name="M:ProjetV1.MainModule.ModeSuppr">
 <summary>
 Met le formulaire récapitulatif en mode suppression
 </summary>
</member>
<member name="M:ProjetV1.MainModule.ModeBilanProvisoire">
 <summary>
 Met le formulaire bilan et récapitulatif en mode bilan provisoire
 </summary>
</member>
<member name="M:ProjetV1.MainModule.ModeBilanFinal">
 <summary>
 Met le formulaire bilan et récapitulatif en mode bilan final
 </summary>
</member>
<member name="M:ProjetV1.MainModule.LoadCandidat(ProjetV1.Candidat@)">
 <summary>
 Remplit le formCandidat avec les informations personnelles d'un candidat
 <param name="c">Le candidat en question</param>
 </summary>
</member>
<member name="M:ProjetV1.MainModule.LoadEpreuves(ProjetV1.Candidat@)">
 <summary>
 Remplit le formEpreuve avec les épreuves d'un candidat
 <param name="c">Le candidat en question</param>
 </summary>
</member>
<member name="M:ProjetV1.MainModule.GetTbNomFormCandidat">
 <summary>
 Retourne le nom du candidat saisi dans le formCandidat
 </summary>
 <returns>Le nom du candidat</returns>
</member>
<member name="M:ProjetV1.MainModule.GetTbPrenomFormCandidat">
 <summary>
 Retourne le prénom du candidat saisi dans le formCandidat
 </summary>
 <returns>Le prénom du candidat</returns>
</member>
<member name="M:ProjetV1.MainModule.SetCandidatFormRecap(ProjetV1.Candidat@)">
 <summary>
 Modifie le candidat à afficher dans le formulaire de récapitulatif
 </summary>
 <param name="c">Le candidat en question</param>
</member>
<member name="M:ProjetV1.MainModule.CréerCandidat">
 <summary>
 Permet de créer un candidat à partir des informations de formCandidat
 </summary>
 <returns></returns>
</member>
<member name="M:ProjetV1.MainModule.CréerCandidat(System.Int32)">
 <summary>
 Permet de créer un candidat à partir d'un identifiant et des informations de formCandidat
 </summary>
 <param name="id"></param>
 <returns></returns>
</member>
<member name="M:ProjetV1.MainModule.GetCandidat(System.Int32)">
 <summary>
 Retourne un candidat en fonction de son identifiant
 </summary>
 <param name="id">Identifiant du candidat</param>
 <returns></returns>
</member>
<member name="M:ProjetV1.MainModule.AjouterCandidat(ProjetV1.Candidat@)">
 <summary>
 Ajoute un candidat à la liste des inscrits
 </summary>
 <param name="candidat">Le candidat en question</param>
</member>
<member name="M:ProjetV1.MainModule.DeleteCandidat(System.Int32)">
 <summary>
 Supprime un candidat à partir de son identifiant
 </summary>
 <param name="id"> L'identifiant du candidat</param>
</member>
<member name="M:ProjetV1.MainModule.GetNbInscrits">
 <summary>
 Retourne le nombre d'inscrits
 </summary>
 <returns>Le nombre d'inscrits</returns>
</member>
<member name="M:ProjetV1.MainModule.GetListeOfInscrits">
 <summary>
 Retourne la liste des inscrits
 </summary>
 <returns>Retourne une liste de candidat</returns>
</member>
<member name="M:ProjetV1.MainModule.Main">
 <summary>
 Point de départ de l'application
 </summary>
</member>
<member name="T:ProjetV1.ModuleFichier">
 <summary>
 Module se chargeant des créer et supprimer les fichiers de sauvegarde et les listings
 </summary>
</member>
<member name="M:ProjetV1.ModuleFichier.GetMatièreDistinct">
 <summary>
 Retourne une liste d'épreuves sans doublons
 </summary>
 <returns>Une liste d'épreuves</returns>
</member>
<member name="M:ProjetV1.ModuleFichier.IsCandidatOfEpreuveValid(System.String,System.String,ProjetV1.Candidat)">
 <summary>
 Vérifie que le candidat s'est inscrit pour cette matière dans cette région
 </summary>
 <param name="r">La région</param>
 <param name="m">La matière</param>
 <param name="c">Le candidat</param>
 <returns></returns>
</member>
<member name="M:ProjetV1.ModuleFichier.CréerListing">
 <summary>
 Création d'un ensemble de fichiers
 Pour chaque région et chaque épreuve on crée un nouveau fichier avec tous les candidats inscrits(nom, prenom, id) 
 </summary>
</member>
<member name="M:ProjetV1.ModuleFichier.SupprListingVide">
 <summary>
 Suppression des listings vides créés lors de la création
 </summary>
</member>
<member name="M:ProjetV1.ModuleFichier.SauvegarderInscrits">
 <summary>
 Sauvegarde des inscriptions en cas de fermeture de l'application sans clôture des inscriptions
 </summary>
</member>
<member name="M:ProjetV1.ModuleFichier.LoadInscrits">
 <summary>
 S'il n'existe aucun fichier de sauvegarde,
 Chargement des inscrits sauvegardés lors d'une inscriptions précédente non close
 Et supression de la sauvegarde
 </summary>
</member>
</members>
</doc>
